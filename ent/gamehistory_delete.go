// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameHistoryDelete is the builder for deleting a GameHistory entity.
type GameHistoryDelete struct {
	config
	hooks    []Hook
	mutation *GameHistoryMutation
}

// Where appends a list predicates to the GameHistoryDelete builder.
func (ghd *GameHistoryDelete) Where(ps ...predicate.GameHistory) *GameHistoryDelete {
	ghd.mutation.Where(ps...)
	return ghd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ghd *GameHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ghd.sqlExec, ghd.mutation, ghd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ghd *GameHistoryDelete) ExecX(ctx context.Context) int {
	n, err := ghd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ghd *GameHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gamehistory.Table, sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID))
	if ps := ghd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ghd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ghd.mutation.done = true
	return affected, err
}

// GameHistoryDeleteOne is the builder for deleting a single GameHistory entity.
type GameHistoryDeleteOne struct {
	ghd *GameHistoryDelete
}

// Where appends a list predicates to the GameHistoryDelete builder.
func (ghdo *GameHistoryDeleteOne) Where(ps ...predicate.GameHistory) *GameHistoryDeleteOne {
	ghdo.ghd.mutation.Where(ps...)
	return ghdo
}

// Exec executes the deletion query.
func (ghdo *GameHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ghdo.ghd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gamehistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ghdo *GameHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := ghdo.Exec(ctx); err != nil {
		panic(err)
	}
}
