// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GopherChessParty/ent/chess"
	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GameHistoryCreate is the builder for creating a GameHistory entity.
type GameHistoryCreate struct {
	config
	mutation *GameHistoryMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ghc *GameHistoryCreate) SetCreatedAt(t time.Time) *GameHistoryCreate {
	ghc.mutation.SetCreatedAt(t)
	return ghc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ghc *GameHistoryCreate) SetNillableCreatedAt(t *time.Time) *GameHistoryCreate {
	if t != nil {
		ghc.SetCreatedAt(*t)
	}
	return ghc
}

// SetNum sets the "num" field.
func (ghc *GameHistoryCreate) SetNum(i int) *GameHistoryCreate {
	ghc.mutation.SetNum(i)
	return ghc
}

// SetMove sets the "move" field.
func (ghc *GameHistoryCreate) SetMove(s string) *GameHistoryCreate {
	ghc.mutation.SetMove(s)
	return ghc
}

// SetUserID sets the "user_id" field.
func (ghc *GameHistoryCreate) SetUserID(u uuid.UUID) *GameHistoryCreate {
	ghc.mutation.SetUserID(u)
	return ghc
}

// SetGameID sets the "game_id" field.
func (ghc *GameHistoryCreate) SetGameID(u uuid.UUID) *GameHistoryCreate {
	ghc.mutation.SetGameID(u)
	return ghc
}

// SetID sets the "id" field.
func (ghc *GameHistoryCreate) SetID(u uuid.UUID) *GameHistoryCreate {
	ghc.mutation.SetID(u)
	return ghc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ghc *GameHistoryCreate) SetNillableID(u *uuid.UUID) *GameHistoryCreate {
	if u != nil {
		ghc.SetID(*u)
	}
	return ghc
}

// SetUser sets the "user" edge to the User entity.
func (ghc *GameHistoryCreate) SetUser(u *User) *GameHistoryCreate {
	return ghc.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Chess entity.
func (ghc *GameHistoryCreate) SetGame(c *Chess) *GameHistoryCreate {
	return ghc.SetGameID(c.ID)
}

// Mutation returns the GameHistoryMutation object of the builder.
func (ghc *GameHistoryCreate) Mutation() *GameHistoryMutation {
	return ghc.mutation
}

// Save creates the GameHistory in the database.
func (ghc *GameHistoryCreate) Save(ctx context.Context) (*GameHistory, error) {
	ghc.defaults()
	return withHooks(ctx, ghc.sqlSave, ghc.mutation, ghc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ghc *GameHistoryCreate) SaveX(ctx context.Context) *GameHistory {
	v, err := ghc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghc *GameHistoryCreate) Exec(ctx context.Context) error {
	_, err := ghc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghc *GameHistoryCreate) ExecX(ctx context.Context) {
	if err := ghc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ghc *GameHistoryCreate) defaults() {
	if _, ok := ghc.mutation.CreatedAt(); !ok {
		v := gamehistory.DefaultCreatedAt()
		ghc.mutation.SetCreatedAt(v)
	}
	if _, ok := ghc.mutation.ID(); !ok {
		v := gamehistory.DefaultID()
		ghc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghc *GameHistoryCreate) check() error {
	if _, ok := ghc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GameHistory.created_at"`)}
	}
	if _, ok := ghc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "GameHistory.num"`)}
	}
	if _, ok := ghc.mutation.Move(); !ok {
		return &ValidationError{Name: "move", err: errors.New(`ent: missing required field "GameHistory.move"`)}
	}
	if _, ok := ghc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GameHistory.user_id"`)}
	}
	if _, ok := ghc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "GameHistory.game_id"`)}
	}
	if len(ghc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "GameHistory.user"`)}
	}
	if len(ghc.mutation.GameIDs()) == 0 {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "GameHistory.game"`)}
	}
	return nil
}

func (ghc *GameHistoryCreate) sqlSave(ctx context.Context) (*GameHistory, error) {
	if err := ghc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ghc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ghc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ghc.mutation.id = &_node.ID
	ghc.mutation.done = true
	return _node, nil
}

func (ghc *GameHistoryCreate) createSpec() (*GameHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GameHistory{config: ghc.config}
		_spec = sqlgraph.NewCreateSpec(gamehistory.Table, sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID))
	)
	if id, ok := ghc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ghc.mutation.CreatedAt(); ok {
		_spec.SetField(gamehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ghc.mutation.Num(); ok {
		_spec.SetField(gamehistory.FieldNum, field.TypeInt, value)
		_node.Num = value
	}
	if value, ok := ghc.mutation.Move(); ok {
		_spec.SetField(gamehistory.FieldMove, field.TypeString, value)
		_node.Move = value
	}
	if nodes := ghc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.UserTable,
			Columns: []string{gamehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ghc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.GameTable,
			Columns: []string{gamehistory.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameHistoryCreateBulk is the builder for creating many GameHistory entities in bulk.
type GameHistoryCreateBulk struct {
	config
	err      error
	builders []*GameHistoryCreate
}

// Save creates the GameHistory entities in the database.
func (ghcb *GameHistoryCreateBulk) Save(ctx context.Context) ([]*GameHistory, error) {
	if ghcb.err != nil {
		return nil, ghcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ghcb.builders))
	nodes := make([]*GameHistory, len(ghcb.builders))
	mutators := make([]Mutator, len(ghcb.builders))
	for i := range ghcb.builders {
		func(i int, root context.Context) {
			builder := ghcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ghcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ghcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ghcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ghcb *GameHistoryCreateBulk) SaveX(ctx context.Context) []*GameHistory {
	v, err := ghcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghcb *GameHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ghcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghcb *GameHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ghcb.Exec(ctx); err != nil {
		panic(err)
	}
}
