// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GopherChessParty/ent/chess"
	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ChessCreate is the builder for creating a Chess entity.
type ChessCreate struct {
	config
	mutation *ChessMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChessCreate) SetCreatedAt(t time.Time) *ChessCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChessCreate) SetNillableCreatedAt(t *time.Time) *ChessCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChessCreate) SetUpdatedAt(t time.Time) *ChessCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChessCreate) SetNillableUpdatedAt(t *time.Time) *ChessCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ChessCreate) SetStatus(c chess.Status) *ChessCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ChessCreate) SetNillableStatus(c *chess.Status) *ChessCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetResult sets the "result" field.
func (cc *ChessCreate) SetResult(c chess.Result) *ChessCreate {
	cc.mutation.SetResult(c)
	return cc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (cc *ChessCreate) SetNillableResult(c *chess.Result) *ChessCreate {
	if c != nil {
		cc.SetResult(*c)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChessCreate) SetID(u uuid.UUID) *ChessCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ChessCreate) SetNillableID(u *uuid.UUID) *ChessCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetWhiteUserID sets the "white_user" edge to the User entity by ID.
func (cc *ChessCreate) SetWhiteUserID(id uuid.UUID) *ChessCreate {
	cc.mutation.SetWhiteUserID(id)
	return cc
}

// SetWhiteUser sets the "white_user" edge to the User entity.
func (cc *ChessCreate) SetWhiteUser(u *User) *ChessCreate {
	return cc.SetWhiteUserID(u.ID)
}

// SetBlackUserID sets the "black_user" edge to the User entity by ID.
func (cc *ChessCreate) SetBlackUserID(id uuid.UUID) *ChessCreate {
	cc.mutation.SetBlackUserID(id)
	return cc
}

// SetBlackUser sets the "black_user" edge to the User entity.
func (cc *ChessCreate) SetBlackUser(u *User) *ChessCreate {
	return cc.SetBlackUserID(u.ID)
}

// AddMoveIDs adds the "moves" edge to the GameHistory entity by IDs.
func (cc *ChessCreate) AddMoveIDs(ids ...uuid.UUID) *ChessCreate {
	cc.mutation.AddMoveIDs(ids...)
	return cc
}

// AddMoves adds the "moves" edges to the GameHistory entity.
func (cc *ChessCreate) AddMoves(g ...*GameHistory) *ChessCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddMoveIDs(ids...)
}

// Mutation returns the ChessMutation object of the builder.
func (cc *ChessCreate) Mutation() *ChessMutation {
	return cc.mutation
}

// Save creates the Chess in the database.
func (cc *ChessCreate) Save(ctx context.Context) (*Chess, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChessCreate) SaveX(ctx context.Context) *Chess {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChessCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChessCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChessCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := chess.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := chess.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := chess.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Result(); !ok {
		v := chess.DefaultResult
		cc.mutation.SetResult(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := chess.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChessCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Chess.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Chess.updated_at"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Chess.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := chess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Chess.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "Chess.result"`)}
	}
	if v, ok := cc.mutation.Result(); ok {
		if err := chess.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Chess.result": %w`, err)}
		}
	}
	if len(cc.mutation.WhiteUserIDs()) == 0 {
		return &ValidationError{Name: "white_user", err: errors.New(`ent: missing required edge "Chess.white_user"`)}
	}
	if len(cc.mutation.BlackUserIDs()) == 0 {
		return &ValidationError{Name: "black_user", err: errors.New(`ent: missing required edge "Chess.black_user"`)}
	}
	return nil
}

func (cc *ChessCreate) sqlSave(ctx context.Context) (*Chess, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChessCreate) createSpec() (*Chess, *sqlgraph.CreateSpec) {
	var (
		_node = &Chess{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chess.Table, sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(chess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(chess.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(chess.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Result(); ok {
		_spec.SetField(chess.FieldResult, field.TypeEnum, value)
		_node.Result = value
	}
	if nodes := cc.mutation.WhiteUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.WhiteUserTable,
			Columns: []string{chess.WhiteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_white_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BlackUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.BlackUserTable,
			Columns: []string{chess.BlackUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_black_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChessCreateBulk is the builder for creating many Chess entities in bulk.
type ChessCreateBulk struct {
	config
	err      error
	builders []*ChessCreate
}

// Save creates the Chess entities in the database.
func (ccb *ChessCreateBulk) Save(ctx context.Context) ([]*Chess, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chess, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChessCreateBulk) SaveX(ctx context.Context) []*Chess {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChessCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChessCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
