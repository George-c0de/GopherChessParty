// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GopherChessParty/ent/chess"
	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/predicate"
	"GopherChessParty/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ChessUpdate is the builder for updating Chess entities.
type ChessUpdate struct {
	config
	hooks    []Hook
	mutation *ChessMutation
}

// Where appends a list predicates to the ChessUpdate builder.
func (cu *ChessUpdate) Where(ps ...predicate.Chess) *ChessUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ChessUpdate) SetCreatedAt(t time.Time) *ChessUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ChessUpdate) SetNillableCreatedAt(t *time.Time) *ChessUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChessUpdate) SetUpdatedAt(t time.Time) *ChessUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *ChessUpdate) SetNillableUpdatedAt(t *time.Time) *ChessUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *ChessUpdate) SetStatus(c chess.Status) *ChessUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ChessUpdate) SetNillableStatus(c *chess.Status) *ChessUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetResult sets the "result" field.
func (cu *ChessUpdate) SetResult(c chess.Result) *ChessUpdate {
	cu.mutation.SetResult(c)
	return cu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (cu *ChessUpdate) SetNillableResult(c *chess.Result) *ChessUpdate {
	if c != nil {
		cu.SetResult(*c)
	}
	return cu
}

// SetWhiteUserID sets the "white_user" edge to the User entity by ID.
func (cu *ChessUpdate) SetWhiteUserID(id uuid.UUID) *ChessUpdate {
	cu.mutation.SetWhiteUserID(id)
	return cu
}

// SetWhiteUser sets the "white_user" edge to the User entity.
func (cu *ChessUpdate) SetWhiteUser(u *User) *ChessUpdate {
	return cu.SetWhiteUserID(u.ID)
}

// SetBlackUserID sets the "black_user" edge to the User entity by ID.
func (cu *ChessUpdate) SetBlackUserID(id uuid.UUID) *ChessUpdate {
	cu.mutation.SetBlackUserID(id)
	return cu
}

// SetBlackUser sets the "black_user" edge to the User entity.
func (cu *ChessUpdate) SetBlackUser(u *User) *ChessUpdate {
	return cu.SetBlackUserID(u.ID)
}

// AddMoveIDs adds the "moves" edge to the GameHistory entity by IDs.
func (cu *ChessUpdate) AddMoveIDs(ids ...uuid.UUID) *ChessUpdate {
	cu.mutation.AddMoveIDs(ids...)
	return cu
}

// AddMoves adds the "moves" edges to the GameHistory entity.
func (cu *ChessUpdate) AddMoves(g ...*GameHistory) *ChessUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddMoveIDs(ids...)
}

// Mutation returns the ChessMutation object of the builder.
func (cu *ChessUpdate) Mutation() *ChessMutation {
	return cu.mutation
}

// ClearWhiteUser clears the "white_user" edge to the User entity.
func (cu *ChessUpdate) ClearWhiteUser() *ChessUpdate {
	cu.mutation.ClearWhiteUser()
	return cu
}

// ClearBlackUser clears the "black_user" edge to the User entity.
func (cu *ChessUpdate) ClearBlackUser() *ChessUpdate {
	cu.mutation.ClearBlackUser()
	return cu
}

// ClearMoves clears all "moves" edges to the GameHistory entity.
func (cu *ChessUpdate) ClearMoves() *ChessUpdate {
	cu.mutation.ClearMoves()
	return cu
}

// RemoveMoveIDs removes the "moves" edge to GameHistory entities by IDs.
func (cu *ChessUpdate) RemoveMoveIDs(ids ...uuid.UUID) *ChessUpdate {
	cu.mutation.RemoveMoveIDs(ids...)
	return cu
}

// RemoveMoves removes "moves" edges to GameHistory entities.
func (cu *ChessUpdate) RemoveMoves(g ...*GameHistory) *ChessUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveMoveIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChessUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChessUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChessUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChessUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := chess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Chess.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Result(); ok {
		if err := chess.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Chess.result": %w`, err)}
		}
	}
	if cu.mutation.WhiteUserCleared() && len(cu.mutation.WhiteUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chess.white_user"`)
	}
	if cu.mutation.BlackUserCleared() && len(cu.mutation.BlackUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chess.black_user"`)
	}
	return nil
}

func (cu *ChessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chess.Table, chess.Columns, sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(chess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(chess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(chess.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Result(); ok {
		_spec.SetField(chess.FieldResult, field.TypeEnum, value)
	}
	if cu.mutation.WhiteUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.WhiteUserTable,
			Columns: []string{chess.WhiteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WhiteUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.WhiteUserTable,
			Columns: []string{chess.WhiteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BlackUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.BlackUserTable,
			Columns: []string{chess.BlackUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BlackUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.BlackUserTable,
			Columns: []string{chess.BlackUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMovesIDs(); len(nodes) > 0 && !cu.mutation.MovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChessUpdateOne is the builder for updating a single Chess entity.
type ChessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChessMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ChessUpdateOne) SetCreatedAt(t time.Time) *ChessUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ChessUpdateOne) SetNillableCreatedAt(t *time.Time) *ChessUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChessUpdateOne) SetUpdatedAt(t time.Time) *ChessUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *ChessUpdateOne) SetNillableUpdatedAt(t *time.Time) *ChessUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ChessUpdateOne) SetStatus(c chess.Status) *ChessUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ChessUpdateOne) SetNillableStatus(c *chess.Status) *ChessUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetResult sets the "result" field.
func (cuo *ChessUpdateOne) SetResult(c chess.Result) *ChessUpdateOne {
	cuo.mutation.SetResult(c)
	return cuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (cuo *ChessUpdateOne) SetNillableResult(c *chess.Result) *ChessUpdateOne {
	if c != nil {
		cuo.SetResult(*c)
	}
	return cuo
}

// SetWhiteUserID sets the "white_user" edge to the User entity by ID.
func (cuo *ChessUpdateOne) SetWhiteUserID(id uuid.UUID) *ChessUpdateOne {
	cuo.mutation.SetWhiteUserID(id)
	return cuo
}

// SetWhiteUser sets the "white_user" edge to the User entity.
func (cuo *ChessUpdateOne) SetWhiteUser(u *User) *ChessUpdateOne {
	return cuo.SetWhiteUserID(u.ID)
}

// SetBlackUserID sets the "black_user" edge to the User entity by ID.
func (cuo *ChessUpdateOne) SetBlackUserID(id uuid.UUID) *ChessUpdateOne {
	cuo.mutation.SetBlackUserID(id)
	return cuo
}

// SetBlackUser sets the "black_user" edge to the User entity.
func (cuo *ChessUpdateOne) SetBlackUser(u *User) *ChessUpdateOne {
	return cuo.SetBlackUserID(u.ID)
}

// AddMoveIDs adds the "moves" edge to the GameHistory entity by IDs.
func (cuo *ChessUpdateOne) AddMoveIDs(ids ...uuid.UUID) *ChessUpdateOne {
	cuo.mutation.AddMoveIDs(ids...)
	return cuo
}

// AddMoves adds the "moves" edges to the GameHistory entity.
func (cuo *ChessUpdateOne) AddMoves(g ...*GameHistory) *ChessUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddMoveIDs(ids...)
}

// Mutation returns the ChessMutation object of the builder.
func (cuo *ChessUpdateOne) Mutation() *ChessMutation {
	return cuo.mutation
}

// ClearWhiteUser clears the "white_user" edge to the User entity.
func (cuo *ChessUpdateOne) ClearWhiteUser() *ChessUpdateOne {
	cuo.mutation.ClearWhiteUser()
	return cuo
}

// ClearBlackUser clears the "black_user" edge to the User entity.
func (cuo *ChessUpdateOne) ClearBlackUser() *ChessUpdateOne {
	cuo.mutation.ClearBlackUser()
	return cuo
}

// ClearMoves clears all "moves" edges to the GameHistory entity.
func (cuo *ChessUpdateOne) ClearMoves() *ChessUpdateOne {
	cuo.mutation.ClearMoves()
	return cuo
}

// RemoveMoveIDs removes the "moves" edge to GameHistory entities by IDs.
func (cuo *ChessUpdateOne) RemoveMoveIDs(ids ...uuid.UUID) *ChessUpdateOne {
	cuo.mutation.RemoveMoveIDs(ids...)
	return cuo
}

// RemoveMoves removes "moves" edges to GameHistory entities.
func (cuo *ChessUpdateOne) RemoveMoves(g ...*GameHistory) *ChessUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveMoveIDs(ids...)
}

// Where appends a list predicates to the ChessUpdate builder.
func (cuo *ChessUpdateOne) Where(ps ...predicate.Chess) *ChessUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChessUpdateOne) Select(field string, fields ...string) *ChessUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chess entity.
func (cuo *ChessUpdateOne) Save(ctx context.Context) (*Chess, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChessUpdateOne) SaveX(ctx context.Context) *Chess {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChessUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChessUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChessUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := chess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Chess.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Result(); ok {
		if err := chess.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`ent: validator failed for field "Chess.result": %w`, err)}
		}
	}
	if cuo.mutation.WhiteUserCleared() && len(cuo.mutation.WhiteUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chess.white_user"`)
	}
	if cuo.mutation.BlackUserCleared() && len(cuo.mutation.BlackUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chess.black_user"`)
	}
	return nil
}

func (cuo *ChessUpdateOne) sqlSave(ctx context.Context) (_node *Chess, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chess.Table, chess.Columns, sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chess.FieldID)
		for _, f := range fields {
			if !chess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(chess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chess.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(chess.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Result(); ok {
		_spec.SetField(chess.FieldResult, field.TypeEnum, value)
	}
	if cuo.mutation.WhiteUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.WhiteUserTable,
			Columns: []string{chess.WhiteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WhiteUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.WhiteUserTable,
			Columns: []string{chess.WhiteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BlackUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.BlackUserTable,
			Columns: []string{chess.BlackUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BlackUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chess.BlackUserTable,
			Columns: []string{chess.BlackUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMovesIDs(); len(nodes) > 0 && !cuo.mutation.MovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chess.MovesTable,
			Columns: []string{chess.MovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chess{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
