// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GopherChessParty/ent/chess"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Chess is the model entity for the Chess schema.
type Chess struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FirstUserID holds the value of the "first_user_id" field.
	FirstUserID uuid.UUID `json:"first_user_id,omitempty"`
	// SecondUserID holds the value of the "second_user_id" field.
	SecondUserID uuid.UUID `json:"second_user_id,omitempty"`
	// Winner holds the value of the "winner" field.
	Winner *uuid.UUID `json:"winner,omitempty"`
	// Status holds the value of the "status" field.
	Status uint8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chess) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chess.FieldWinner:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case chess.FieldStatus:
			values[i] = new(sql.NullInt64)
		case chess.FieldCreatedAt, chess.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chess.FieldID, chess.FieldFirstUserID, chess.FieldSecondUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chess fields.
func (c *Chess) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chess.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case chess.FieldFirstUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field first_user_id", values[i])
			} else if value != nil {
				c.FirstUserID = *value
			}
		case chess.FieldSecondUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field second_user_id", values[i])
			} else if value != nil {
				c.SecondUserID = *value
			}
		case chess.FieldWinner:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field winner", values[i])
			} else if value.Valid {
				c.Winner = new(uuid.UUID)
				*c.Winner = *value.S.(*uuid.UUID)
			}
		case chess.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case chess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case chess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Chess.
// This includes values selected through modifiers, order, etc.
func (c *Chess) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Chess.
// Note that you need to call Chess.Unwrap() before calling this method if this Chess
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chess) Update() *ChessUpdateOne {
	return NewChessClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Chess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chess) Unwrap() *Chess {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chess is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chess) String() string {
	var builder strings.Builder
	builder.WriteString("Chess(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("first_user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.FirstUserID))
	builder.WriteString(", ")
	builder.WriteString("second_user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.SecondUserID))
	builder.WriteString(", ")
	if v := c.Winner; v != nil {
		builder.WriteString("winner=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Chesses is a parsable slice of Chess.
type Chesses []*Chess
