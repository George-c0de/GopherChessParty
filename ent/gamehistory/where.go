// Code generated by ent, DO NOT EDIT.

package gamehistory

import (
	"GopherChessParty/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldNum, v))
}

// Move applies equality check predicate on the "move" field. It's identical to MoveEQ.
func Move(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldMove, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldUserID, v))
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldGameID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLTE(FieldNum, v))
}

// MoveEQ applies the EQ predicate on the "move" field.
func MoveEQ(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldMove, v))
}

// MoveNEQ applies the NEQ predicate on the "move" field.
func MoveNEQ(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldMove, v))
}

// MoveIn applies the In predicate on the "move" field.
func MoveIn(vs ...string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldMove, vs...))
}

// MoveNotIn applies the NotIn predicate on the "move" field.
func MoveNotIn(vs ...string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldMove, vs...))
}

// MoveGT applies the GT predicate on the "move" field.
func MoveGT(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGT(FieldMove, v))
}

// MoveGTE applies the GTE predicate on the "move" field.
func MoveGTE(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldGTE(FieldMove, v))
}

// MoveLT applies the LT predicate on the "move" field.
func MoveLT(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLT(FieldMove, v))
}

// MoveLTE applies the LTE predicate on the "move" field.
func MoveLTE(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldLTE(FieldMove, v))
}

// MoveContains applies the Contains predicate on the "move" field.
func MoveContains(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldContains(FieldMove, v))
}

// MoveHasPrefix applies the HasPrefix predicate on the "move" field.
func MoveHasPrefix(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldHasPrefix(FieldMove, v))
}

// MoveHasSuffix applies the HasSuffix predicate on the "move" field.
func MoveHasSuffix(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldHasSuffix(FieldMove, v))
}

// MoveEqualFold applies the EqualFold predicate on the "move" field.
func MoveEqualFold(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEqualFold(FieldMove, v))
}

// MoveContainsFold applies the ContainsFold predicate on the "move" field.
func MoveContainsFold(v string) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldContainsFold(FieldMove, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldUserID, vs...))
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldEQ(FieldGameID, v))
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNEQ(FieldGameID, v))
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldIn(FieldGameID, vs...))
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...uuid.UUID) predicate.GameHistory {
	return predicate.GameHistory(sql.FieldNotIn(FieldGameID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.GameHistory {
	return predicate.GameHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.GameHistory {
	return predicate.GameHistory(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.GameHistory {
	return predicate.GameHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Chess) predicate.GameHistory {
	return predicate.GameHistory(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameHistory) predicate.GameHistory {
	return predicate.GameHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameHistory) predicate.GameHistory {
	return predicate.GameHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameHistory) predicate.GameHistory {
	return predicate.GameHistory(sql.NotPredicates(p))
}
