// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"GopherChessParty/ent/chess"
	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// GameHistory is the model entity for the GameHistory schema.
type GameHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Num holds the value of the "num" field.
	Num int `json:"num,omitempty"`
	// Move holds the value of the "move" field.
	Move string `json:"move,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GameID holds the value of the "game_id" field.
	GameID uuid.UUID `json:"game_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameHistoryQuery when eager-loading is set.
	Edges        GameHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GameHistoryEdges holds the relations/edges for other nodes in the graph.
type GameHistoryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Game holds the value of the game edge.
	Game *Chess `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameHistoryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameHistoryEdges) GameOrErr() (*Chess, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: chess.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamehistory.FieldNum:
			values[i] = new(sql.NullInt64)
		case gamehistory.FieldMove:
			values[i] = new(sql.NullString)
		case gamehistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case gamehistory.FieldID, gamehistory.FieldUserID, gamehistory.FieldGameID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameHistory fields.
func (gh *GameHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamehistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gh.ID = *value
			}
		case gamehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gh.CreatedAt = value.Time
			}
		case gamehistory.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				gh.Num = int(value.Int64)
			}
		case gamehistory.FieldMove:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field move", values[i])
			} else if value.Valid {
				gh.Move = value.String
			}
		case gamehistory.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				gh.UserID = *value
			}
		case gamehistory.FieldGameID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field game_id", values[i])
			} else if value != nil {
				gh.GameID = *value
			}
		default:
			gh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameHistory.
// This includes values selected through modifiers, order, etc.
func (gh *GameHistory) Value(name string) (ent.Value, error) {
	return gh.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GameHistory entity.
func (gh *GameHistory) QueryUser() *UserQuery {
	return NewGameHistoryClient(gh.config).QueryUser(gh)
}

// QueryGame queries the "game" edge of the GameHistory entity.
func (gh *GameHistory) QueryGame() *ChessQuery {
	return NewGameHistoryClient(gh.config).QueryGame(gh)
}

// Update returns a builder for updating this GameHistory.
// Note that you need to call GameHistory.Unwrap() before calling this method if this GameHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (gh *GameHistory) Update() *GameHistoryUpdateOne {
	return NewGameHistoryClient(gh.config).UpdateOne(gh)
}

// Unwrap unwraps the GameHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gh *GameHistory) Unwrap() *GameHistory {
	_tx, ok := gh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameHistory is not a transactional entity")
	}
	gh.config.driver = _tx.drv
	return gh
}

// String implements the fmt.Stringer.
func (gh *GameHistory) String() string {
	var builder strings.Builder
	builder.WriteString("GameHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gh.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", gh.Num))
	builder.WriteString(", ")
	builder.WriteString("move=")
	builder.WriteString(gh.Move)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gh.UserID))
	builder.WriteString(", ")
	builder.WriteString("game_id=")
	builder.WriteString(fmt.Sprintf("%v", gh.GameID))
	builder.WriteByte(')')
	return builder.String()
}

// GameHistories is a parsable slice of GameHistory.
type GameHistories []*GameHistory
