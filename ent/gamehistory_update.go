// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GopherChessParty/ent/chess"
	"GopherChessParty/ent/gamehistory"
	"GopherChessParty/ent/predicate"
	"GopherChessParty/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GameHistoryUpdate is the builder for updating GameHistory entities.
type GameHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *GameHistoryMutation
}

// Where appends a list predicates to the GameHistoryUpdate builder.
func (ghu *GameHistoryUpdate) Where(ps ...predicate.GameHistory) *GameHistoryUpdate {
	ghu.mutation.Where(ps...)
	return ghu
}

// SetCreatedAt sets the "created_at" field.
func (ghu *GameHistoryUpdate) SetCreatedAt(t time.Time) *GameHistoryUpdate {
	ghu.mutation.SetCreatedAt(t)
	return ghu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ghu *GameHistoryUpdate) SetNillableCreatedAt(t *time.Time) *GameHistoryUpdate {
	if t != nil {
		ghu.SetCreatedAt(*t)
	}
	return ghu
}

// SetNum sets the "num" field.
func (ghu *GameHistoryUpdate) SetNum(i int) *GameHistoryUpdate {
	ghu.mutation.ResetNum()
	ghu.mutation.SetNum(i)
	return ghu
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ghu *GameHistoryUpdate) SetNillableNum(i *int) *GameHistoryUpdate {
	if i != nil {
		ghu.SetNum(*i)
	}
	return ghu
}

// AddNum adds i to the "num" field.
func (ghu *GameHistoryUpdate) AddNum(i int) *GameHistoryUpdate {
	ghu.mutation.AddNum(i)
	return ghu
}

// SetMove sets the "move" field.
func (ghu *GameHistoryUpdate) SetMove(s string) *GameHistoryUpdate {
	ghu.mutation.SetMove(s)
	return ghu
}

// SetNillableMove sets the "move" field if the given value is not nil.
func (ghu *GameHistoryUpdate) SetNillableMove(s *string) *GameHistoryUpdate {
	if s != nil {
		ghu.SetMove(*s)
	}
	return ghu
}

// SetUserID sets the "user_id" field.
func (ghu *GameHistoryUpdate) SetUserID(u uuid.UUID) *GameHistoryUpdate {
	ghu.mutation.SetUserID(u)
	return ghu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ghu *GameHistoryUpdate) SetNillableUserID(u *uuid.UUID) *GameHistoryUpdate {
	if u != nil {
		ghu.SetUserID(*u)
	}
	return ghu
}

// SetGameID sets the "game_id" field.
func (ghu *GameHistoryUpdate) SetGameID(u uuid.UUID) *GameHistoryUpdate {
	ghu.mutation.SetGameID(u)
	return ghu
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (ghu *GameHistoryUpdate) SetNillableGameID(u *uuid.UUID) *GameHistoryUpdate {
	if u != nil {
		ghu.SetGameID(*u)
	}
	return ghu
}

// SetUser sets the "user" edge to the User entity.
func (ghu *GameHistoryUpdate) SetUser(u *User) *GameHistoryUpdate {
	return ghu.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Chess entity.
func (ghu *GameHistoryUpdate) SetGame(c *Chess) *GameHistoryUpdate {
	return ghu.SetGameID(c.ID)
}

// Mutation returns the GameHistoryMutation object of the builder.
func (ghu *GameHistoryUpdate) Mutation() *GameHistoryMutation {
	return ghu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ghu *GameHistoryUpdate) ClearUser() *GameHistoryUpdate {
	ghu.mutation.ClearUser()
	return ghu
}

// ClearGame clears the "game" edge to the Chess entity.
func (ghu *GameHistoryUpdate) ClearGame() *GameHistoryUpdate {
	ghu.mutation.ClearGame()
	return ghu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ghu *GameHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ghu.sqlSave, ghu.mutation, ghu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ghu *GameHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ghu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ghu *GameHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ghu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghu *GameHistoryUpdate) ExecX(ctx context.Context) {
	if err := ghu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghu *GameHistoryUpdate) check() error {
	if ghu.mutation.UserCleared() && len(ghu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GameHistory.user"`)
	}
	if ghu.mutation.GameCleared() && len(ghu.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GameHistory.game"`)
	}
	return nil
}

func (ghu *GameHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ghu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamehistory.Table, gamehistory.Columns, sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID))
	if ps := ghu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ghu.mutation.CreatedAt(); ok {
		_spec.SetField(gamehistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ghu.mutation.Num(); ok {
		_spec.SetField(gamehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := ghu.mutation.AddedNum(); ok {
		_spec.AddField(gamehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := ghu.mutation.Move(); ok {
		_spec.SetField(gamehistory.FieldMove, field.TypeString, value)
	}
	if ghu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.UserTable,
			Columns: []string{gamehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ghu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.UserTable,
			Columns: []string{gamehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ghu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.GameTable,
			Columns: []string{gamehistory.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ghu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.GameTable,
			Columns: []string{gamehistory.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ghu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ghu.mutation.done = true
	return n, nil
}

// GameHistoryUpdateOne is the builder for updating a single GameHistory entity.
type GameHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameHistoryMutation
}

// SetCreatedAt sets the "created_at" field.
func (ghuo *GameHistoryUpdateOne) SetCreatedAt(t time.Time) *GameHistoryUpdateOne {
	ghuo.mutation.SetCreatedAt(t)
	return ghuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ghuo *GameHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *GameHistoryUpdateOne {
	if t != nil {
		ghuo.SetCreatedAt(*t)
	}
	return ghuo
}

// SetNum sets the "num" field.
func (ghuo *GameHistoryUpdateOne) SetNum(i int) *GameHistoryUpdateOne {
	ghuo.mutation.ResetNum()
	ghuo.mutation.SetNum(i)
	return ghuo
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ghuo *GameHistoryUpdateOne) SetNillableNum(i *int) *GameHistoryUpdateOne {
	if i != nil {
		ghuo.SetNum(*i)
	}
	return ghuo
}

// AddNum adds i to the "num" field.
func (ghuo *GameHistoryUpdateOne) AddNum(i int) *GameHistoryUpdateOne {
	ghuo.mutation.AddNum(i)
	return ghuo
}

// SetMove sets the "move" field.
func (ghuo *GameHistoryUpdateOne) SetMove(s string) *GameHistoryUpdateOne {
	ghuo.mutation.SetMove(s)
	return ghuo
}

// SetNillableMove sets the "move" field if the given value is not nil.
func (ghuo *GameHistoryUpdateOne) SetNillableMove(s *string) *GameHistoryUpdateOne {
	if s != nil {
		ghuo.SetMove(*s)
	}
	return ghuo
}

// SetUserID sets the "user_id" field.
func (ghuo *GameHistoryUpdateOne) SetUserID(u uuid.UUID) *GameHistoryUpdateOne {
	ghuo.mutation.SetUserID(u)
	return ghuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ghuo *GameHistoryUpdateOne) SetNillableUserID(u *uuid.UUID) *GameHistoryUpdateOne {
	if u != nil {
		ghuo.SetUserID(*u)
	}
	return ghuo
}

// SetGameID sets the "game_id" field.
func (ghuo *GameHistoryUpdateOne) SetGameID(u uuid.UUID) *GameHistoryUpdateOne {
	ghuo.mutation.SetGameID(u)
	return ghuo
}

// SetNillableGameID sets the "game_id" field if the given value is not nil.
func (ghuo *GameHistoryUpdateOne) SetNillableGameID(u *uuid.UUID) *GameHistoryUpdateOne {
	if u != nil {
		ghuo.SetGameID(*u)
	}
	return ghuo
}

// SetUser sets the "user" edge to the User entity.
func (ghuo *GameHistoryUpdateOne) SetUser(u *User) *GameHistoryUpdateOne {
	return ghuo.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Chess entity.
func (ghuo *GameHistoryUpdateOne) SetGame(c *Chess) *GameHistoryUpdateOne {
	return ghuo.SetGameID(c.ID)
}

// Mutation returns the GameHistoryMutation object of the builder.
func (ghuo *GameHistoryUpdateOne) Mutation() *GameHistoryMutation {
	return ghuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ghuo *GameHistoryUpdateOne) ClearUser() *GameHistoryUpdateOne {
	ghuo.mutation.ClearUser()
	return ghuo
}

// ClearGame clears the "game" edge to the Chess entity.
func (ghuo *GameHistoryUpdateOne) ClearGame() *GameHistoryUpdateOne {
	ghuo.mutation.ClearGame()
	return ghuo
}

// Where appends a list predicates to the GameHistoryUpdate builder.
func (ghuo *GameHistoryUpdateOne) Where(ps ...predicate.GameHistory) *GameHistoryUpdateOne {
	ghuo.mutation.Where(ps...)
	return ghuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ghuo *GameHistoryUpdateOne) Select(field string, fields ...string) *GameHistoryUpdateOne {
	ghuo.fields = append([]string{field}, fields...)
	return ghuo
}

// Save executes the query and returns the updated GameHistory entity.
func (ghuo *GameHistoryUpdateOne) Save(ctx context.Context) (*GameHistory, error) {
	return withHooks(ctx, ghuo.sqlSave, ghuo.mutation, ghuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ghuo *GameHistoryUpdateOne) SaveX(ctx context.Context) *GameHistory {
	node, err := ghuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ghuo *GameHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ghuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuo *GameHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ghuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghuo *GameHistoryUpdateOne) check() error {
	if ghuo.mutation.UserCleared() && len(ghuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GameHistory.user"`)
	}
	if ghuo.mutation.GameCleared() && len(ghuo.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GameHistory.game"`)
	}
	return nil
}

func (ghuo *GameHistoryUpdateOne) sqlSave(ctx context.Context) (_node *GameHistory, err error) {
	if err := ghuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamehistory.Table, gamehistory.Columns, sqlgraph.NewFieldSpec(gamehistory.FieldID, field.TypeUUID))
	id, ok := ghuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ghuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamehistory.FieldID)
		for _, f := range fields {
			if !gamehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gamehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ghuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ghuo.mutation.CreatedAt(); ok {
		_spec.SetField(gamehistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ghuo.mutation.Num(); ok {
		_spec.SetField(gamehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := ghuo.mutation.AddedNum(); ok {
		_spec.AddField(gamehistory.FieldNum, field.TypeInt, value)
	}
	if value, ok := ghuo.mutation.Move(); ok {
		_spec.SetField(gamehistory.FieldMove, field.TypeString, value)
	}
	if ghuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.UserTable,
			Columns: []string{gamehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ghuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.UserTable,
			Columns: []string{gamehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ghuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.GameTable,
			Columns: []string{gamehistory.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ghuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamehistory.GameTable,
			Columns: []string{gamehistory.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chess.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameHistory{config: ghuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ghuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ghuo.mutation.done = true
	return _node, nil
}
